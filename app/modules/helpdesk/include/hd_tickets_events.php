<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_hd_tickets  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeMoveNextList"]=true;

		$this->events["BeforeProcessRowList"]=true;

		$this->events["BeforeProcessList"]=true;


		$this->events["BeforeShowList"]=true;


		$this->events["BeforeDelete"]=true;

		$this->events["GetTablePermissions"]=true;

		$this->events["BeforeQueryList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		
if($data["statusid"] == 5 && $_SESSION["current_user_type"]==="customer"){
	$record["checkbox_attrs"]= "style='display:none;'";
}

if($pageObject->pageName !== "list_customer" && $data["statusid"]){
	$color = DBLookup("select ".AddFieldWrappers("statuscolor")." from ".AddTableWrappers("hd_status")." where ".AddFieldWrappers("id")."=".$data["statusid"]);
	$record["css"]="background:".$color;
}
if($pageObject->pageName == "list_customer" && $data["statusid"] == 5){
	$record["css"]="background:#f6f6f6";
}
;
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before record processed
function BeforeProcessRowList(&$data, $pageObject)
{

		if(!$data["subject"])
	$data["subject"] = "( no subject )";
if($data["assignedid"]==0)
	$data["assignedid"] = "";
//info for context menu
$ticket_info = array();
$ticket_info["statusid"] = $data["statusid"];
$ticket_info["priorityid"] = $data["priorityid"];
$ticket_info["folderid"] = $data["folderid"];
$ticket_info["assignedid"] = $data["assignedid"];
$pageObject->setProxyValue("ticket_info_".$data["id"],$ticket_info);

return true;
;
} // function BeforeProcessRowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

				// List page: Before process
function BeforeProcessList($pageObject)
{

		if( postvalue("getOnlineUsers") != false ){

	$userData = Security::currentUserData();
	$active_time = time() - (15 * 60); 
	$active_time_format = date("Y-m-d H:i:s",$active_time);
	DB::SetConnection(DB::ConnectionByTable(Security::getLoginTable()));
	$sql = DB::PrepareSQL("select * from ".AddTableWrappers($_SESSION["user_table_for_query"])." where ".AddFieldWrappers("last_activity").">=':1' and ".AddFieldWrappers($_SESSION["user_keyfield_for_query"])."<>:2 and ".AddFieldWrappers("usertype")." in('admin','user')",$active_time_format,$userData[$_SESSION["user_keyfield_for_query"]]);
	$user_list_rs = DB::Query( $sql );
	DB::SetConnection(DB::DefaultConnection());
	$response = array();
	$response["user_online"] = array();
	$i = 0;
	while($user = $user_list_rs->fetchAssoc() ){
		if($i > 10) break;
		$i++;
		$response["user_online"][] = $user[GetDisplayNameField()];
	}
//getFirstViewingUserInticket
	$ticketKeys = postvalue("tickets_keys");
	$vewingTickets = array();
	$replingTickets = array();
	foreach($ticketKeys as $tickets_key){
		$vewingTickets[$tickets_key] = getFirstViewingUserInticket($tickets_key);
	}
	foreach($ticketKeys as $tickets_key){
		$replingTickets[$tickets_key] = getFirstReplingUserInticket($tickets_key);
	}
	$response["vewingTickets"] = $vewingTickets;
	$response["replingTickets"] = $replingTickets;
	DB::SetConnection(DB::ConnectionByTable(Security::getLoginTable()));
	$sqlUserCount = DB::PrepareSQL("select count(*) as count from ".AddTableWrappers($_SESSION["user_table_for_query"])." where ".AddFieldWrappers("last_activity").">=':1' and ".AddFieldWrappers($_SESSION["user_keyfield_for_query"])."<>:2 and ".AddFieldWrappers("usertype")." in('admin','user')",$active_time_format,$userData[$_SESSION["user_keyfield_for_query"]]);
	$sqlUserCountRs = DB::Query($sqlUserCount);
	$userCount = $sqlUserCountRs->fetchAssoc();
	$response["userOnlineCount"] = DBLookup($sqlUserCount);
	DB::SetConnection(DB::DefaultConnection());
	echo my_json_encode($response);
	exit();

}

if ($_SESSION["current_user_type"] !== "customer") {
    if (postvalue("getShortInfo") != false) {
		$ticket_rs = DB::Select("hd_tickets", array("id" => postvalue("getShortInfo")));
        $ticket = $ticket_rs->fetchAssoc();
		$customer_rs = DB::Select("hd_users", array("id" => $ticket["clientid"]));
        $customer = $customer_rs->fetchAssoc();
        if (is_null($customer)) {
            $customer = array("fullname" => "", "usertype" => "");
        }
        $last_message = DBLookup(DB::PrepareSQL("select ".AddFieldWrappers("body")." from ".AddTableWrappers("hd_messages")." where ".AddFieldWrappers("ticketid")."=:1 order by ".AddFieldWrappers("id")." desc", $ticket["id"]));
        echo my_json_encode(array("created" => date("D m/d/Y", strtotime($ticket["created"])), "fullname" => $customer[GetDisplayNameField()], "message" => substr($last_message, 0, 300) . "...", "type" =>  ""));
        exit();
    }
    if (postvalue("a") == "popup_actions") {
        DB::Exec("update ".AddTableWrappers("hd_tickets")." set " . AddFieldWrappers(postvalue("fieldname")) . "=" . postvalue("id") . " where ".AddFieldWrappers("id")." in (" . postvalue("tickets") . ")");
				if( postvalue("fieldname") === "statusid" ){
						//update client status
						$client_status = 7;
						/* closed - closed */
						if(postvalue("id") ==="5") $client_status = 5;
						/* answered - awaiting for response */
						if(postvalue("id") ==="3") $client_status = 6;
						DB::Exec("update ".AddTableWrappers("hd_tickets")." set " . AddFieldWrappers("client_status") . "=" . $client_status . " where ".AddFieldWrappers("id")." in (" . postvalue("tickets") . ")");
				}

				die();
    }

    if (postvalue("a") == "change_field") {
        DB::Update("hd_tickets", array(postvalue("field") =>  postvalue("fieldvalue")), array("id" => postvalue("ticketid")));
				if( postvalue("field") === "statusid" && postvalue("fieldvalue") ==="5" ) DB::Update("hd_tickets",array("client_status" => 5),array("id" => postvalue("ticketid") ));
        die();
    }
    if (postvalue("a") == "delete_ticket") {
        DB::Delete("hd_tickets", array("id" => postvalue("ticketid")));
        die();
    }
}
if (postvalue("a") == "close_ticket") {
	DB::Update("hd_tickets",array("statusid" => 5,"client_status" => 5),array("id" => postvalue("ticketid") ));
	die();
}

if ($_SESSION["current_user_type"] === "customer" && $pageObject->pageName === "list") {
	HeaderRedirect("hd_tickets","list","page=list_customer");
	exit();
}
if( postvalue("f") != false){
	$matches = array();
	preg_match('/folderid~equals~(\d+)/', postvalue("f"), $matches);
	if(count($matches) > 0 && isset($matches[1])){
		$pageObject->setProxyValue("folder_id",$matches[1]);
		$_SESSION["FolderID"] = $matches[1];
		$folder_name = DBLookup("select ".AddFieldWrappers("foldername")." from ".AddTableWrappers("hd_folders")." where ".AddFieldWrappers("id")."=".$matches[1]);
		$_SESSION["FolderName"] = $folder_name;
		$pageObject->setProxyValue("folder_name",$folder_name);
		$pageObject->setProxyValue("folder_id",$_SESSION["FolderID"]);
	
	}
}
else{
	$pageObject->setProxyValue("folder_id",1);
	$_SESSION["FolderID"] = null;
	$_SESSION["FolderName"] = null;
}

if( postvalue("fs_checkbox") !=false )
	$_SESSION["fs_checkbox"] = postvalue("fs_checkbox");
if( postvalue("fs_checkbox_all") !=false )
	unset($_SESSION["fs_checkbox"]);
if($pageObject->pageName === "list_customer" )
	$pageObject->pageSize = 10;
;
} // function BeforeProcessList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, $pageObject)
{

		$username = Security::getUserName();
$userdata = Security::getUserData($username);
$pageObject->setProxyValue("usertype",$_SESSION["current_user_type"]);
if($_SESSION["current_user_type"]!=="user"){
	$pageObject->hideItem("close_tickets");
}
else{

	$pageObject->hideItem("change_status");
	$pageObject->hideItem("change_priority");
	$pageObject->hideItem("change_assigned");
	$pageObject->hideItem("move_to_folder");
	$pageObject->hideItem("delete");
}
if($userdata["usertype"] === "customer"){
	$pageObject->hideItem("go_to_folder");
	$pageObject->hideItem("change_status");
	$pageObject->hideItem("change_priority");
	$pageObject->hideItem("change_assigned");
	$pageObject->hideItem("move_to_folder");
	$pageObject->hideItem("delete");
	$pageObject->showItem("close_tickets");
}

if( $_SESSION["FolderID"] && $_SESSION["FolderName"] ){
		$xt->assign( "breadcrumbs", true );
		$xt->assign( "breadcrumb", true );
		$breadcrumb = array();
		if($pageObject->pageName !== "list_customer" ) $breadcrumb[0] = array("crumb_attrs"=> 'href="'.GetTableLink("hd_folders","list").'"' ,"crumb_title_link"=> true, "crumb_title"=> "Folders");
		if($pageObject->pageName === "list_customer" ) $crumb_title = "Tickets"; else $crumb_title = $_SESSION["FolderName"];
		$breadcrumb[1] = array("crumb_attrs" => "", "crumb_title_span"=> true,"crumb_title" => $crumb_title);
		$xt->assign_loopsection("crumb", $breadcrumb);
}
if($pageObject->pageName === "list_customer" ){
	$maxPages = ceil($pageObject->numRowsFromSQL / $pageObject->pageSize);
	$pagination = $xt->getVar("pagination");
	$pagination = "<div class='pag_prev'><span class='pagarrow'><i class='fa fa-angle-left'></i></span>Prev</div>".$pagination."<div class='nav_list_arrow'><i class='fa fa-caret-down' aria-hidden='true'></i></div><div class='off_page'>of ".$maxPages."</div><div data-max=".$maxPages." class='pag_next'>Next<span class='pagarrow'><i class='fa fa-angle-right'></i></span></div>";
	$xt->assign("pagination",$pagination);
}
if($_SESSION["current_user_type"] !== "customer"){
	$pagination = $xt->getVar("pagination");
	$replace1 = array("First","Previous","Next","Last");
	$replace2 = array("<<","<",">",">>");
	$pagination = str_replace($replace1,$replace2,$pagination);
	$xt->assign("pagination",$pagination);
}

$stylename = "hd_tickets_list ".$_SESSION["current_user_type"];
if( $pageObject->numRowsFromSQL == 0 ){
	$stylename.=" numRows0";
}
$xt->assign("stylename",$stylename);
$pageObject->setProxyValue("who_is_online",DBLookup("select who_is_online from hd_settings"));

;
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record deleted
function BeforeDelete($where, &$deleted_values, &$message, $pageObject)
{

		$username = Security::getUserName();
$userdata = Security::getUserData($username);
if($userdata["usertype"]=="user")
	return false;
return true;
;
} // function BeforeDelete

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Get Table Permissions
function GetTablePermissions($permissions)
{

		
if( $_SESSION["current_user_type"] === "admin" ){
	$permissions.="M";
}
return $permissions;
;
} // function GetTablePermissions

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before SQL query
function BeforeQueryList(&$strSQL, &$strWhereClause, &$strOrderBy, $pageObject)
{

		$user = Security::currentUserData();
if( is_null($_SESSION["FolderID"]) && is_null($_SESSION["FolderName"]) && ($user["usertype"] === "admin" || $user["usertype"] === "user") ){
	$strWhereClause = empty($strWhereClause)?AddFieldWrappers("folderid")."=1":($strWhereClause." and ".AddFieldWrappers("folderid")."=1");
	$pageObject->setProxyValue("folder_id",1);
	$pageObject->setProxyValue("folder_name","General");
	
}

//filter by status
if( isset($_SESSION["fs_checkbox"]) ){
	$strWhereClause = empty($strWhereClause)?AddFieldWrappers("statusid")." in(".$_SESSION["fs_checkbox"].")":($strWhereClause." and ".AddFieldWrappers("statusid")." in(".$_SESSION["fs_checkbox"].")");
}
;
} // function BeforeQueryList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>