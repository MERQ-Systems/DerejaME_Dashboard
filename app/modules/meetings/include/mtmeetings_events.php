<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_mtmeetings  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["ProcessValuesAdd"]=true;

		$this->events["BeforeShowAdd"]=true;

		$this->events["BeforeProcessAdd"]=true;

		$this->events["BeforeProcessEdit"]=true;

		$this->events["BeforeProcessView"]=true;

		$this->events["BeforeProcessList"]=true;

		$this->events["BeforeAdd"]=true;

		$this->events["AfterAdd"]=true;

		$this->events["AfterEdit"]=true;

		$this->events["BeforeShowEdit"]=true;

		$this->events["BeforeProcessRowList"]=true;

		$this->events["BeforeShowView"]=true;

		$this->events["BeforeMoveNextList"]=true;


		$this->events["BeforeDelete"]=true;


		$this->events["BeforeShowList"]=true;

		$this->events["BeforeEdit"]=true;




	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesAdd(&$values, $pageObject)
{

		
$deftimezone = date_default_timezone_get();
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
$rs2 = DB::Select("mttimezone", array("id"=>$data["timezone"]));
$data2 = $rs2->fetchAssoc();
$timezone = $data2["zoom"];
date_default_timezone_set($timezone);

if(!postvalue("start")){
	$d = date("d");
	$m = getMonthNameByNumber(date("n"), "MMMM");
	$y = date("Y");
	$values["schedule"] = date("Y-m-d H:i:s");
}
else{
	$arr = explode("-",postvalue("start"));
	$d = $arr[2];
	$m = getMonthNameByNumber(date("n",strtotime(postvalue("start"))), "MMMM");
	$y = $arr[0];
	$values["schedule"] = postvalue("start")." 09:00:00am";
}
date_default_timezone_set($deftimezone);

global $locale_info;
if(strtoupper(substr($locale_info["LOCALE_SSHORTDATE"],0,1))=="Y")
	$values["name"] = "Meeting ".$y." ".$m." ".$d;
elseif(strtoupper(substr($locale_info["LOCALE_SSHORTDATE"],0,1))=="D")
	$values["name"] = "Meeting ".$d." ".$m." ".$y;
else
	$values["name"] = "Meeting ".$m." ".$d." ".$y;



;
} // function ProcessValuesAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowAdd(&$xt, &$templatefile, $pageObject)
{

		$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
if(!$data["emailfield"]){
	$pageObject->hideItem("subj_field");
	$pageObject->hideItem("email_field");
}

if(!$data["phonefield"]){
	$pageObject->hideItem("sms_field");
}

if(postvalue("pmode")){
	$pageObject->hideItem("add_back_list");
	$pageObject->hideItem("add_header");
}
else
	$pageObject->hideItem("close");
$_SESSION["pmode"] = postvalue("pmode");
;
} // function BeforeShowAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
				// Add page: Before process
function BeforeProcessAdd($pageObject)
{

		$fillSettings = true;
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
if(!$data["userstable"] || !$data["provider"] || !$data["idfield"] || !$data["timezone"] || !$data["phonefield"] && !$data["emailfield"])
	$fillSettings = false;
if($data["provider"] == "RingCentral" && (!$data["RC_APIServerURL"] || !$data["RC_ClientID"] || !$data["RC_ClientSecret"] || !$data["RC_Account"] || !$data["RC_Password"]))
	$fillSettings = false;
if($data["provider"] == "Zoom" && !$data["Z_Token"])
	$fillSettings = false;
if($data["provider"] == "Microsoft Graph" && (!$data["MS_ClientID"] || !$data["MS_ClientSecret"] || !$data["MS_TenantID"]))
	$fillSettings = false;
if($data["provider"] == "Google Meet" && (!$data["G_ClientID"] || !$data["G_ClientSecret"] || !$data["G_APIKey"]))
	$fillSettings = false;
if($data["provider"] == "WEBEX" && (!$data["WB_ClientID"] || !$data["WB_ClientSecret"]))
	$fillSettings = false;
if(!$fillSettings){
	header("Location:mtmeetings_list.php");
	die();
}


$rs = DB::Select("mtsettings");
if($data = $rs->fetchAssoc()){
	$table = $data["userstable"];
	$name = $data["namefield"];
	$id = $data["idfield"];
}

global $tables_data;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupTable"] = $table;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LinkField"] = $id;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["DisplayField"] = $name;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;

$redirect_uri = $url = projectURL() . GetTableLink( "mtmeetings", "add" );
$_SESSION["redirect_uri"] = $redirect_uri;

if($data["provider"] == "Google Meet" && postvalue("a") != "added"){
	if(!$_GET["code"]){
		$client_id = $data["G_ClientID"];
		$login_url = 'https://accounts.google.com/o/oauth2/auth?scope=' . urlencode('https://www.googleapis.com/auth/calendar') . '&redirect_uri='.urlencode($redirect_uri).'&response_type=code&client_id='.$client_id.'&access_type=online';
		header("Location: ".$login_url);
		die();
	}
	else
		$_SESSION["gcode"] = $_GET["code"];
}

if($data["provider"] == "Microsoft Graph" && postvalue("a") != "added"){
	if(!$_GET["code"]){
		$login_url = "https://login.microsoftonline.com/".$data["MS_TenantID"]."/oauth2/v2.0/authorize?client_id=".$data["MS_ClientID"]."&response_type=code&redirect_uri=".urlencode($redirect_uri)."&response_mode=query&scope=OnlineMeetings.ReadWrite&state=12345";
		header("Location: ".$login_url);
		die();
	}
	else
		$_SESSION["mscode"] = $_GET["code"];
}

if($data["provider"] == "WEBEX" && postvalue("a") != "added"){
	if(!$_GET["code"]){
		$login_url = "https://webexapis.com/v1/authorize?client_id=".$data["WB_ClientID"]."&response_type=code&redirect_uri=".urlencode($redirect_uri)."&scope=meeting%3Arecordings_read%20spark%3Akms%20meeting%3Acontrols_write%20meeting%3Aschedules_read%20meeting%3Aparticipants_read%20meeting%3Acontrols_read%20meeting%3Apreferences_write%20meeting%3Arecordings_write%20meeting%3Apreferences_read%20meeting%3Aparticipants_write%20meeting%3Aadmin_transcripts_read%20meeting%3Aschedules_write&state=set_state_here";
		header("Location: ".$login_url);
		die();
	}
	else
		$_SESSION["wbcode"] = $_GET["code"];
}
;
} // function BeforeProcessAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
				// Edit page: Before process
function BeforeProcessEdit($pageObject)
{

		$fillSettings = true;
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
if(!$data["userstable"] || !$data["provider"] || !$data["idfield"] || !$data["timezone"] || !$data["phonefield"] && !$data["emailfield"])
	$fillSettings = false;
if($data["provider"] == "RingCentral" && (!$data["RC_APIServerURL"] || !$data["RC_ClientID"] || !$data["RC_ClientSecret"] || !$data["RC_Account"] || !$data["RC_Password"]))
	$fillSettings = false;
if($data["provider"] == "Zoom" && !$data["Z_Token"])
	$fillSettings = false;
if($data["provider"] == "Microsoft Graph" && (!$data["MS_ClientID"] || !$data["MS_ClientSecret"] || !$data["MS_TenantID"]))
	$fillSettings = false;
if($data["provider"] == "Google Meet" && (!$data["G_ClientID"] || !$data["G_ClientSecret"] || !$data["G_APIKey"]))
	$fillSettings = false;
if($data["provider"] == "WEBEX" && (!$data["WB_ClientID"] || !$data["WB_ClientSecret"]))
	$fillSettings = false;
if(!$fillSettings){
	header("Location:mtmeetings_list.php");
	die();
}

$rs = DB::Select("mtsettings");
if($data = $rs->fetchAssoc()){
	$table = $data["userstable"];
	$name = $data["namefield"];
	$id = $data["idfield"];
}

global $tables_data;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupTable"] = $table;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LinkField"] = $id;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["DisplayField"] = $name;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;

;
} // function BeforeProcessEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
				// View page: Before process
function BeforeProcessView($pageObject)
{

		if(postvalue("a") == "noti" && postvalue("id")){
	$rv = DB::Select("mtmeetings", array("id"=>postvalue("id")));
	$values = $rv->fetchAssoc();
	$dt="";
	if($values["schedule"]){
		$dt = date("m/d/Y H:i:s", strtotime($values["schedule"]));
	}

	$rs = DB::Select("mtsettings");
	$data = $rs->fetchAssoc();
	if($data["emailfield"]){
		$email = "";
		$rs2 = DB::Select($data["userstable"], array($data["idfield"]=>$values["ownerid"]));
		$data2 = $rs2->fetchAssoc();
		$email = $data2[$data["emailfield"]];

		$attachments =  array();
		if($dt){
				$link = $values["joinlink"];
				if($values["ownerid"] == Security::getUserName())
					$link = $values["createlink"];
				$ical = 'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
CALSCALE:GREGORIAN
BEGIN:VEVENT
UID:' . md5($values["name"]) . '
DTSTAMP:' . time() . '
LOCATION:
DESCRIPTION: Meeting URL:'.$link.'
SUMMARY:' . str_replace("'","\'",$values["name"]) . '
DTSTART:' . date("Ymd\TH:i:s", strtotime($values["schedule"])) . '
DTEND:' . date("Ymd\TH:i:s", strtotime($values["schedule"])+60*60) . '
END:VEVENT
END:VCALENDAR';
				$fname = "templates_c/calendar_".date("Ymdhis", strtotime($values["schedule"])).".ics";
				if(file_exists(getabspath($fname)))
					unlink(getabspath($fname));
				runner_save_file(getabspath($fname), $ical);
				$attachments =  array(array('path' => getabspath($fname)));
			}

		$rs2 = DB::Query("select * from ".addTableWrappers($data["userstable"])." where ".addFieldWrappers($data["idfield"])." in (".$values["users"].",0) and ".addFieldWrappers($data["idfield"])."<>".$values["ownerid"]);
		while($data2 = $rs2->fetchAssoc()){
			if($email)
				$email.=",";
			$email.=$data2[$data["emailfield"]];
		}
		if($email){
			$subject = $values["subj"];
			$body = $values["email"]."\r\n";
			if($dt){
				$body.= "Schedule: ".$dt."\r\n";
			}
			$body.= $values["joinlink"];
			$ret=runner_mail(array('to' => $email, 'subject' => $subject, 'body' => $body, 'attachments' => $attachments));
		}
	}
	if($data["phonefield"]){
		$number = "";
		$sms = $values["sms"]." ";
		if($dt)
			$sms.= "Schedule: ".$dt.",";
		$sms.= $values["joinlink"];
		$rs2 = DB::Query("select * from ".addTableWrappers($data["userstable"])." where ".addFieldWrappers($data["idfield"])." in (".$values["users"].",0) and ".addFieldWrappers($data["idfield"])."<>".$values["ownerid"]);
		while($data2 = $rs2->fetchAssoc()){
			$number = $data2[$data["phonefield"]];
			if($number)
				$ret = runner_sms($number, $sms);
		}
		$sms = $values["sms"]." ";
		if($dt)
			$sms.= "Schedule: ".$dt.",";
		$sms.= $values["createlink"];
		$rs2 = DB::Select($data["userstable"], array($data["idfield"]=>$values["ownerid"]));
		$data2 = $rs2->fetchAssoc();
		$number = $data2[$data["phonefield"]];
		if($number)
			$ret = runner_sms($number, $sms);
	}
	echo "Notifications sent";
	die();
}

$fillSettings = true;
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
if(!$data["userstable"] || !$data["provider"] || !$data["idfield"] || !$data["timezone"] || !$data["phonefield"] && !$data["emailfield"])
	$fillSettings = false;
if($data["provider"] == "RingCentral" && (!$data["RC_APIServerURL"] || !$data["RC_ClientID"] || !$data["RC_ClientSecret"] || !$data["RC_Account"] || !$data["RC_Password"]))
	$fillSettings = false;
if($data["provider"] == "Zoom" && !$data["Z_Token"])
	$fillSettings = false;
if($data["provider"] == "Microsoft Graph" && (!$data["MS_ClientID"] || !$data["MS_ClientSecret"] || !$data["MS_TenantID"]))
	$fillSettings = false;
if($data["provider"] == "Google Meet" && (!$data["G_ClientID"] || !$data["G_ClientSecret"] || !$data["G_APIKey"]))
	$fillSettings = false;
if(!$fillSettings){
	header("Location:mtmeetings_list.php");
	die();
}

$rs = DB::Select("mtsettings");
if($data = $rs->fetchAssoc()){
	$table = $data["userstable"];
	$name = $data["namefield"];
	$id = $data["idfield"];
}

global $tables_data;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupTable"] = $table;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LinkField"] = $id;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["DisplayField"] = $name;
$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;

$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LookupTable"] = $table;
$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LinkField"] = $id;
$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["DisplayField"] = $name;
$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;

;
} // function BeforeProcessView

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

				// List page: Before process
function BeforeProcessList($pageObject)
{

		$_SESSION["pmode"] = "";
$rs = DB::Select("mtsettings");
if($data = $rs->fetchAssoc()){
	$table = $data["userstable"];
	$name = $data["namefield"];
	$id = $data["idfield"];
}
if($table){
	global $tables_data;
	$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupTable"] = $table;
	$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LinkField"] = $id;
	$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["DisplayField"] = $name;
	$tables_data["mtmeetings"]["users"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;
	$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LookupTable"] = $table;
	$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LinkField"] = $id;
	$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["DisplayField"] = $name;
	$tables_data["mtmeetings"]["owner"]["EditFormats"]["edit"]["LookupOrderBy"] = $name;
}

;
} // function BeforeProcessList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$message, $inline, $pageObject)
{

		$values["notisend"] = 0;
	
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();

if(Security::isLoggedIn()){
	$user = Security::getUserData(Security::getUserName());
	$values["ownerid"] = $user[$data["idfield"]];
}
if($values["ownerid"]=="")
	$values["ownerid"] = 0;

$rs2 = DB::Select("mttimezone", array("id"=>$data["timezone"]));
$data2 = $rs2->fetchAssoc();
$rctimezone = $data2["rc"];
$zoomtimezone = $data2["zoom"];

if($data["provider"] == "RingCentral"){
	$settings = array(
		 'username'     =>  $data["RC_Account"],
		 'extension'    =>  101, 
		 'password'     => $data["RC_Password"],
		 'clientId'     => $data["RC_ClientID"],
		 'clientSecret' => $data["RC_ClientSecret"],
		 'server'       => $data["RC_APIServerURL"]
	); 

  $params = array(
		 'topic' => $values["name"],
		 'allowJoinBeforeHost' => true,
		 'startHostVideo' => true,
		 'startParticipantsVideo' => true,
		 'audioOptions' => array(
			  "ComputerAudio",
				"Phone"
		 )
	);
	$dt="";
	if($values["schedule"]){
		$datetime = date("Y-m-d\TH:i:s\Z", strtotime($values["schedule"]));
		$params["meetingType"] = "Scheduled";
		$params["schedule"] = array("startTime" => $datetime,"durationInMinutes" => 30,"timeZone" => array("id" => $rctimezone));
		$dt = date("m/d/Y H:i:s", strtotime($values["schedule"]));
	}
	else
		$params["meetingType"] = "Instant";

		if($values["password"])
			$params["password"] = $values["password"];

	if($data["saveInCloud"])
		$params["autoRecordType"] = "cloud";

	$url = $data["RC_APIServerURL"]."/restapi/oauth/token";
	$auth = base64_encode($data["RC_ClientID"].":".$data["RC_ClientSecret"]);
	$headers = array("Authorization"=>"Basic ".$auth, "content-type"=>"application/x-www-form-urlencoded");
	$tokenparams = "username=".$data["RC_Account"]."&password=".$data["RC_Password"]."&extension=101&grant_type=password";
	
	$response = runner_http_request( $url, $tokenparams, "POST", $headers, true );
	
	$arrresponse = my_json_decode($response["content"]);
	if($arrresponse["error_description"]){
		$message = $arrresponse["error_description"];
		return false;
	}
	
	$token = $arrresponse["access_token"];
	$postFields = my_json_encode($params);
	$url = $data["RC_APIServerURL"]."/restapi/v1.0/account/~/extension/~/meeting";
	$headers = array("authorization"=>"Bearer ".$token, "content-type"=>"application/json");
	$postFields = my_json_encode($params);
	$response = runner_http_request( $url, $postFields, "POST", $headers, true );
	$arrresponse = my_json_decode($response["content"]);
	$values["createlink"] = $arrresponse["links"]["startUri"];
	$values["joinlink"] = $arrresponse["links"]["joinUri"];
}
if($data["provider"] == "Zoom"){
	  $token = $data["Z_Token"];

		$createAMeetingArray['topic']      = $values["name"];
	  $createAMeetingArray['agenda']     = "";
		$dt = "";
		if($values["schedule"]){
			$datetime = date("Y-m-d\TH:i:s", strtotime($values["schedule"]));
			$createAMeetingArray['type'] = 2;
			$createAMeetingArray['start_time'] = $datetime;
			$dt = date("m/d/Y H:i:s", strtotime($values["schedule"]));
		}
		else
			$createAMeetingArray['type'] = 1;
		
		$createAMeetingArray['timezone'] = $zoomtimezone;
		if($values["password"])
			$createAMeetingArray['password'] = $values["password"];
		else
			$createAMeetingArray['password'] = "";
		$createAMeetingArray['duration'] = 60;
		$createAMeetingArray['settings'] = array(
			 'join_before_host'  => false,
			 'host_video'        => true,
			 'participant_video' => true,
			 'mute_upon_entry'   => false,
			 'enforce_login'     => false,
			 'alternative_hosts' => ""
		);
	if($data["saveInCloud"])
		$createAMeetingArray['settings']['auto_recording'] = true;
	
	$postFields = my_json_encode($createAMeetingArray);
	$url = "https://api.zoom.us/v2/users/me/meetings";
	$headers = array("authorization"=>" Bearer ".$token, "content-type"=>"application/json");
	$response = runner_http_request( $url, $postFields, "POST", $headers, true );
  $arrresponse = my_json_decode($response["content"]);
	if($arrresponse["message"]){
		$message = $arrresponse["message"];
		return false;
	}
	$values["createlink"] = $arrresponse["start_url"];
  $values["joinlink"] = $arrresponse["join_url"];
}
if($data["provider"] == "Microsoft Graph"){
	$clientId = $data["MS_ClientID"];
	$clientSecret = $data["MS_ClientSecret"];


	$url = "https://login.microsoftonline.com/".$data["MS_TenantID"]."/oauth2/v2.0/token";
	$params = array(
    "client_id" => $clientId,
    "scope" => "https://graph.microsoft.com/.default",
    "client_secret" => $clientSecret,
    "grant_type" => "authorization_code",
	"code" => $_SESSION["mscode"],
	"redirect_uri" => $_SESSION["redirect_uri"],
	);
	$headers  = array("Content-Type" => "application/x-www-form-urlencoded");
	$res = runner_post_request($url, $params, $headers);

	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
	if(strlen($content["error_description"])>0){
		echo "Error : ".$content["error_description"]."<br>Please redirect to <a href='".$_SESSION["redirect_uri"]."'>".$_SESSION["redirect_uri"]."</a>";
		die();
	}
	$token = $content["access_token"];

	$url = "https://graph.microsoft.com/beta/communications/onlineMeetings";
	$headers = array("Authorization" => "Bearer ".$token, "Content-type" => "application/json");
	$params = "{\r\n\"subject\":\"".$values["name"]."\"\r\n}";
	
	$res = runner_http_request($url, $params, "POST", $headers);

	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
	if(count($content["error"])>0){
		echo "Error : ".$content["error"]["code"]."<br>Please redirect to <a href='".$_SESSION["redirect_uri"]."'>".$_SESSION["redirect_uri"]."</a>";
		
		die();
	}
	$values["createlink"] = $content["joinWebUrl"];
  $values["joinlink"] = $content["joinWebUrl"];
}
if($data["provider"] == "Google Meet"){
	$client_id = $data["G_ClientID"];
	$client_secret = $data["G_ClientSecret"];
	$apikey = $data["G_APIKey"];
	
	if(postvalue("code"))
		$code = postvalue("code");
	else
		$code = $_SESSION["gcode"];

	$url = 'https://www.googleapis.com/oauth2/v4/token';			
  $curlPost = 'client_id=' . $client_id . '&redirect_uri=' . $_SESSION["redirect_uri"] . '&client_secret=' . $client_secret . '&code='. $code . '&grant_type=authorization_code';
	$res = runner_http_request($url, $curlPost, "POST");

	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
	if(strlen($content["error"]["message"])>0){
		echo 'Error : '.$content["error"]["message"]."<br>Please redirect to <a href='".$_SESSION["redirect_uri"]."'>".$_SESSION["redirect_uri"]."</a>";
		die();
	}
	$access_token = $content["access_token"];
	$event_timezone = $zoomtimezone;
	$calendar_id = "primary";
	$all_day = 0;
	$dt = "";
	if($values["schedule"]){
		$start_time = date("Y-m-d\TH:i:s", strtotime($values["schedule"]));
		$end_time = date("Y-m-d\TH:i:s", strtotime($values["schedule"])+60*60);
		$dt = date("m/d/Y H:i:s", strtotime($values["schedule"]));
	}
	else{
		$all_day = 1;
		$start_time = date("Y-m-d");
		$end_time = $start_time;
	}

	$url_events = 'https://www.googleapis.com/calendar/v3/calendars/' . $calendar_id . '/events';

	$curlPost = array('summary' => $values["name"]);
	if($all_day == 1) {
		$curlPost['start'] = array('date' => $start_time);
		$curlPost['end'] = array('date' => $end_time);
	}
	else {
		$curlPost['start'] = array('dateTime' => $start_time, 'timeZone' => $event_timezone);
		$curlPost['end'] = array('dateTime' => $end_time, 'timeZone' => $event_timezone);
	}

	$url_events = 'https://www.googleapis.com/calendar/v3/calendars/' . $calendar_id . '/events?conferenceDataVersion=1&alt=json&key='.$apikey;
	$createRequest = array("requestId" => "7qxalsvy0e","conferenceSolutionKey" => array("type" => "hangoutsMeet"));

	$curlPost["conferenceData"] = array("createRequest" => $createRequest);

	$res = runner_http_request($url_events, my_json_encode($curlPost), "POST", array('Authorization'=>'Bearer '. $access_token, 'Content-Type' =>'application/json'));

	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
	if(strlen($content["error"]["message"])>0){
		echo 'Error : '.$content["error"]["message"]."<br>Please redirect to <a href='".$_SESSION["redirect_uri"]."'>".$_SESSION["redirect_uri"]."</a>";
		die();
	}
	$values["createlink"] = $content["hangoutLink"];
  $values["joinlink"] = $content["hangoutLink"];
}

if($data["provider"] == "WEBEX"){
	$client_id = $data["WB_ClientID"];
	$client_secret = $data["WB_ClientSecret"];
	
	if(postvalue("code"))
		$code = postvalue("code");
	else
		$code = $_SESSION["wbcode"];

	$url = 'https://webexapis.com/v1/access_token';			
  $curlPost = 'client_id=' . $client_id . '&redirect_uri=' . $_SESSION["redirect_uri"] . '&client_secret=' . $client_secret . '&code='. $code . '&grant_type=authorization_code';
	$res = runner_http_request($url, $curlPost, "POST");

	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
		if(count($content["errors"])>0){
		echo 'Error : '.$content["errors"][0]["description"]."<br>Please redirect to <a href='".$_SESSION["redirect_uri"]."'>".$_SESSION["redirect_uri"]."</a>";
		die();
	}
	$access_token = $content["access_token"];
	$header = array();
	$dt = "";
	if($values["schedule"]){
		$start_time = date("Y-m-d H:i:s", strtotime($values["schedule"]));
		$end_time = date("Y-m-d H:i:s", strtotime($values["schedule"])+60*60);
		$dt = date("m/d/Y H:i:s", strtotime($values["schedule"]));
	}
	else{
		$start_time = date("Y-m-d");
		$end_time = $start_time;
	}

	$url_events = 'https://webexapis.com/v1/meetings';

	$header['start'] = $start_time;
	$header['end'] = $end_time;
	$header['timezone'] = $zoomtimezone;
	$header["title"] = $values["name"];
	if($values["password"])
		$header["password"] = $values["password"];
	$header["timezone"] = $zoomtimezone;
	$header["enabledAutoRecordMeeting"] = false;
	if($data["saveInCloud"])
		$header["enabledAutoRecordMeeting"] = true;


	$res = runner_http_request($url_events, my_json_encode($header), "POST", array('Authorization'=>'Bearer '. $access_token, 'Content-Type' =>'application/json'));
	if(strlen($res["error"])>0){
		echo 'Error : '.$res["error"];
		die();
	}
	$content = my_json_decode($res["content"]);
	if(count($content["errors"])>0){
		$error_text = str_replace( "%description%", $content["errors"][0]["description"], GetCustomLabel("errorMessage")); 
		echo str_replace("%redirect_uri%",$_SESSION["redirect_uri"],$error_text);
		die();
	}

	$values["createlink"] = $content["webLink"];
  $values["joinlink"] = $content["webLink"];
}

if($data["emailfield"]){
		$email = "";
		$rs2 = DB::Select($data["userstable"], array($data["idfield"]=>$values["ownerid"]));
		$data2 = $rs2->fetchAssoc();
		$email = $data2[$data["emailfield"]];

		$attachments =  array();
		if($dt){
				$link = $values["joinlink"];
				if($values["ownerid"] == Security::getUserName())
					$link = $values["createlink"];
				$ical = 'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
CALSCALE:GREGORIAN
BEGIN:VEVENT
UID:' . md5($values["name"]) . '
DTSTAMP:' . time() . '
LOCATION:
DESCRIPTION: Meeting URL:'.$link.'
SUMMARY:' . str_replace("'","\'",$values["name"]) . '
DTSTART:' . date("Ymd\TH:i:s", strtotime($values["schedule"])) . '
DTEND:' . date("Ymd\TH:i:s", strtotime($values["schedule"])+60*60) . '
END:VEVENT
END:VCALENDAR';
				$fname = "templates_c/calendar_".date("Ymdhis", strtotime($values["schedule"])).".ics";
				if(file_exists(getabspath($fname)))
					unlink(getabspath($fname));
				runner_save_file(getabspath($fname), $ical);
				$attachments =  array(array('path' => getabspath($fname)));
			}

		$rs2 = DB::Query("select * from ".addTableWrappers($data["userstable"])." where ".addFieldWrappers($data["idfield"])." in (".$values["users"].",0) and ".addFieldWrappers($data["idfield"])."<>".$values["ownerid"]);
		while($data2 = $rs2->fetchAssoc()){
			if($email)
				$email.=",";
			$email.=$data2[$data["emailfield"]];
		}
		if($email){
			$subject = $values["subj"];
			$body = $values["email"]."\r\n";
			if($dt){
				$body.= "Schedule: ".$dt."\r\n";
			}
			$body.= $values["joinlink"];
			$ret=runner_mail(array('to' => $email, 'subject' => $subject, 'body' => $body, 'attachments' => $attachments));
		}
	}
if($data["phonefield"]){
	$number = "";
	$sms = $values["sms"]." ";
	if($dt)
		$sms.= "Schedule: ".$dt.",";
	$sms.= $values["joinlink"];
	$rs2 = DB::Query("select * from ".addTableWrappers($data["userstable"])." where ".addFieldWrappers($data["idfield"])." in (".$values["users"].",0) and ".addFieldWrappers($data["idfield"])."<>".$values["ownerid"]);
	while($data2 = $rs2->fetchAssoc()){
		
		$number = $data2[$data["phonefield"]];
		if($number)
			$ret = runner_sms($number, $sms);
	}
	$sms = $values["sms"]." ";
	if($dt)
		$sms.= "Schedule: ".$dt.",";
	$sms.= $values["createlink"];
	$rs2 = DB::Query("select * from ".addTableWrappers($data["userstable"])." where ".addFieldWrappers($data["idfield"])."=".$values["ownerid"]);
	$data2 = $rs2->fetchAssoc();
	$number = $data2[$data["phonefield"]];
	if($number)
		$ret = runner_sms($number, $sms);
}

return true;
;
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record added
function AfterAdd(&$values, &$keys, $inline, $pageObject)
{

		if($_SESSION["pmode"]){
	$_SESSION["pmode"]="";
	header("Location: mtmeetings_view.php?pmode=window&editid1=".$keys["id"]);
}
else
	header("Location: mtmeetings_view.php?editid1=".$keys["id"]);

die();
;
} // function AfterAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record updated
function AfterEdit(&$values, $where, &$oldvalues, &$keys, $inline, $pageObject)
{

		if($_SESSION["pmode"]){
	$_SESSION["pmode"]="";
	header("Location: mtmeetings_view.php?pmode=window&editid1=".$keys["id"]);
}
else
	header("Location: mtmeetings_view.php?editid1=".$keys["id"]);
die();
;
} // function AfterEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		if(postvalue("pmode")){
	$pageObject->hideItem("edit_back_list");
	$pageObject->hideItem("edit_header");
}
else
	$pageObject->hideItem("close");

$_SESSION["pmode"] = postvalue("pmode");
;
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before record processed
function BeforeProcessRowList(&$data, $pageObject)
{

		if(Security::isLoggedIn()){
	if(Security::getUserName() && Security::getUserName()!="admin"){
		$rs = DB::Select("mtsettings");
		$record = $rs->fetchAssoc();
		$id = $record["idfield"];
		$arrid = explode(",",$data["users"]);
		$info = Security::getUserData(Security::getUserName());
		if($data["ownerid"] == $info[$id] || in_array($info[$id],$arrid))
			return true;
		else
			return false;
	}
}
return true;
;
} // function BeforeProcessRowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowView(&$xt, &$templatefile, &$values, $pageObject)
{

		if(Security::isLoggedIn()){
	$rs = DB::Select("mtsettings");
	$record = $rs->fetchAssoc();
	$id = $record["idfield"];
	$info = Security::getUserData(Security::getUserName());
	if($values["ownerid"] != $info[$id] && Security::getUserName()!="admin"){
		$pageObject->hideItem("create_link_label");
		$pageObject->hideItem("create_link_control");
		$pageObject->hideItem("tabs_settings");
		$pageObject->hideItem("label_settings");
		$pageObject->hideItem("mtpassword");
	}
}
if(!$values["schedule"])
	$pageObject->hideItem("mtscheduled");
if($values["ownerid"]==0)
	$pageObject->hideItem("ownerid_control");
if(!$values["password"])
	$pageObject->hideItem("mtpassword");
if(!$values["desc"])
	$pageObject->hideItem("mtdesk");
if(!$values["subj"])
	$pageObject->hideItem("mtsubj");
if(!$values["email"])
	$pageObject->hideItem("mtemail");
if(!$values["sms"])
	$pageObject->hideItem("mtsms");

$pageObject->setProxyValue("h_popup",750);
if(!$values["subj"] && !$values["email"] && !$values["sms"]){
	$pageObject->hideItem("tabs_settings");
	$pageObject->hideItem("label_settings");
	$pageObject->setProxyValue("h_popup",480);
}

	

if(postvalue("pmode")){
	$pageObject->hideItem("view_back_list");
	$pageObject->hideItem("view_header");
}
else{
	$pageObject->hideItem("edit");
	$pageObject->hideItem("close");
}

$pageObject->hideItem("real_clink");

$_SESSION["start_link"] = $values["clink"];
$_SESSION["join_link"] = $values["jlink"];
;
} // function BeforeShowView

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		if(Security::isLoggedIn()){
	$rs = DB::Select("mtsettings");
	$rec = $rs->fetchAssoc();
	$id = $rec["idfield"];
	$info = Security::getUserData(Security::getUserName());
	if($data["ownerid"] != $info[$id] && Security::getUserName()!="admin"){
		$record["editlink_attrs"] = "style='display:none'";
		$record["inlineeditlink_attrs"] = "style='display:none'";
	}
}
;
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record deleted
function BeforeDelete($where, &$deleted_values, &$message, $pageObject)
{

		if(Security::isLoggedIn()){
	$rs = DB::Select("mtsettings");
	$record = $rs->fetchAssoc();
	$id = $record["idfield"];
	$info = Security::getUserData(Security::getUserName());
	if($deleted_values["ownerid"] != $info[$id] && Security::getUserName()!="admin")
		return false;
	else
		return true;
}
return true;
;
} // function BeforeDelete

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, $pageObject)
{

		$_SESSION["fillSettings"] = "";
$fillSettings = true;
$rs = DB::Select("mtsettings");
$data = $rs->fetchAssoc();
if(!$data["userstable"] || !$data["provider"] || !$data["idfield"] || !$data["timezone"] || !$data["phonefield"] && !$data["emailfield"])
	$fillSettings = false;
if($data["provider"] == "RingCentral" && (!$data["RC_APIServerURL"] || !$data["RC_ClientID"] || !$data["RC_ClientSecret"] || !$data["RC_Account"] || !$data["RC_Password"]))
	$fillSettings = false;
if($data["provider"] == "Zoom" && !$data["Z_Token"])
	$fillSettings = false;
if($data["provider"] == "Microsoft Graph" && (!$data["MS_ClientID"] || !$data["MS_ClientSecret"] || !$data["MS_TenantID"]))
	$fillSettings = false;
if($data["provider"] == "Google Meet" && (!$data["G_ClientID"] || !$data["G_ClientSecret"] || !$data["G_APIKey"]))
	$fillSettings = false;
if($data["provider"] == "WEBEX" && (!$data["WB_ClientID"] || !$data["WB_ClientSecret"]))
	$fillSettings = false;

if(!$fillSettings){
	if(Security::getUserName()=="admin"){
		$_SESSION["fillSettings"] = str_replace( "%url%","mtsettings_edit.php?editid1=1",GetCustomLabel("fillSettingAdmin") );
	}
	else
		$_SESSION["fillSettings"] = GetCustomLabel("fillSettingNoAdmin");
	$pageObject->hideItem("add");
	$pageObject->hideItem("delete");
	$pageObject->hideItem("details_found");
	$pageObject->hideItem("page_size");
}
$pageObject->setProxyValue("fillSettings",$fillSettings);

if(!Security::isLoggedIn())
	$pageObject->hideField("owner");


;
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		return true;
;
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>